import React, { useState, useEffect } from "react";
import "./Feed.css";
import url from '../../../env.js';
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faFile } from "@fortawesome/free-solid-svg-icons";
import { FaHeart } from "react-icons/fa";


const Feed = () => {
  const [postText, setPostText] = useState("");
  const [selectedSentiment, setSelectedSentiment] = useState(null);
  const [Posts, setPosts] = useState([]);
  const [commentText, setCommentText] = useState({});


  const fetchPosts = async () => {
    try {
      const response = await fetch(`${url.apipath}getpost`);
      const data = await response.json();
      console.log(data);

      if (data.success) {
        const sortedPosts = data.posts
          .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
          .slice(0, 10); // Show only the latest 5 posts
        console.log(sortedPosts)
        setPosts(sortedPosts);

      }
    } catch (error) {
      console.error("Error fetching posts:", error);
    }
  };
  useEffect(() => {


    fetchPosts();
  }, []);
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    const now = new Date();

    // Check if the date is today
    const isToday = date.toDateString() === now.toDateString();

    // Format time as HH:MM (12-hour format with AM/PM)
    const formattedTime = date.toLocaleTimeString([], {
      hour: "2-digit",
      minute: "2-digit",
      hour12: true, // Change to false if you want 24-hour format
    });

    return isToday ? `Today ${formattedTime}` : `${date.toLocaleDateString()} ${formattedTime}`;
  };

  const handleLike = async (postId) => {
    try {
      const response = await fetch(`${url.apipath}like/${postId}`, {
        method: "PUT",
        credentials: "include",
        headers: {
          Authorization: `Bearer ${localStorage.getItem("token")}`,
        },
      });

      if (response.ok) {
        const data = await response.json();

        // Update the post in state without refetching everything
        setPosts((prevPosts) =>
          prevPosts.map((post) =>
            post._id === postId ? { ...post, likes: data.likes } : post
          )
        );
      }
    } catch (error) {
      console.error("Error liking post:", error);
    }
  };
  const handleComment = async (postId) => {
    if (!commentText[postId]) return;

    try {
      const response = await fetch(`${url.apipath}comment/${postId}`, {
        method: "POST",
        credentials: "include",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${localStorage.getItem("token")}`,
        },
        body: JSON.stringify({ text: commentText[postId] }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error("Error response:", errorData);
        return;
      }

      const data = await response.json();

      // Manually update comments in state
      setPosts((prevPosts) =>
        prevPosts.map((post) =>
          post._id === postId ? { ...post, comments: data.comments } : post
        )
      );

      setCommentText((prev) => ({ ...prev, [postId]: "" })); // Clear input after posting

    } catch (error) {
      console.error("Error adding comment:", error);
    }
  };

  return (
    <div className="feed-container">
      {/* Post Input Box */}
      <div className="post-box">
        <textarea
          placeholder="Start Post"
          value={postText}
          onChange={(e) => setPostText(e.target.value)}
        />
        <div className="post-actions">
          <button
            className={selectedSentiment === "bullish" ? "active bullish" : ""}
            onClick={() => setSelectedSentiment("bullish")}
          >
            Bullish
          </button>
          <button
            className={selectedSentiment === "bearish" ? "active bearish" : ""}
            onClick={() => setSelectedSentiment("bearish")}
          >
            Bearish
          </button>
          <button className="post-btn">POST</button>
        </div>
      </div>

      {/* Recommendation Section */}
      <div className="recommendation">
        <i className="ri-calendar-check-line"></i> Recommendation
      </div>

      {/* Posts Section */}
      <div className="posts">

        {Posts.map((post) => (

          <div key={post.id} className="post-card">
            <div className="post-header">
              <div className="post-profile">
                <div className="profile-placeholder"></div>
                <div>
                  <h4>{post.userId?.username || "Unknown User"}</h4>
                  <p>{post.role}</p>

                  <p className="time">
                    <i className="ri-time-line"></i> {formatDate(post.createdAt)}
                  </p>
                </div>
              </div>
            </div>

            {/* Render multiple media files (images/videos) */}
            {/* Handling multiple media types */}
            <div className="post-media">
              {post.media?.map((file, index) => {
                const fileUrl = `http://localhost:8001/assets/profiles/${file}`;
                const fileExtension = file.split(".").pop().toLowerCase();

                if (["jpg", "jpeg", "png", "gif"].includes(fileExtension)) {
                  return <img key={index} src={fileUrl} alt="Post" className="post-image" />;
                } else if (["mp4", "webm", "ogg"].includes(fileExtension)) {
                  return (
                    <video key={index} controls autoPlay muted loop className="post-video">
                      <source src={fileUrl} type={`video/${fileExtension}`} />
                      Your browser does not support the video tag.
                    </video>
                  );
                } else if (["pdf", "doc", "docx", "ppt", "txt"].includes(fileExtension)) {
                  return (
                    <a key={index} href={fileUrl} target="_blank" rel="noopener noreferrer" className="post-document">
                      <FontAwesomeIcon icon={faFile} style={{ color: "green" }} />
                      View Document
                    </a>
                  );
                } else {
                  return <p key={index}>Unsupported file format</p>;
                }
              })}
            </div>
            <p>{post.content}</p>
            <div className="post-actions">
              {/* <button onClick={() => handleLike(post._id)} className="like-btn">
              <FaHeart color={post.likes.includes(userId) ? "red" : "gray"} size={20} />

                {post.likes.length}
              </button> */}

              <div className="comment-box">
                <input
                  type="text"
                  placeholder="Add a comment..."
                  value={commentText[post._id] || ""}
                  onChange={(e) =>
                    setCommentText((prev) => ({ ...prev, [post._id]: e.target.value }))
                  }
                />
                {commentText[post._id]?.trim() && (
                  <button className="post-btn" onClick={() => handleComment(post._id)}>
                    <strong>Post</strong>
                  </button>
                )}
              </div>

              {/* <div className="comments">
    {post.comments.map((c, idx) => (
      <p key={idx}>
        <strong>{c.userId?.username}:</strong>{c.text}
      </p>
    ))}
  </div> */}
              <div className="comments">
                {post.comments && post.comments.length > 0 ? (
                  post.comments.map((c, idx) => (
                    <p key={idx}>
                      <strong>{c.userId?.username || "Unknown User"}:</strong> {c.text}
                    </p>
                  ))
                ) : (
                  <p>No comments yet</p>
                )}
              </div>


            </div>
          </div>

        ))}
      </div>
    </div>
  );
};

export default Feed;

////////////////////////////////////////////////////// INVESTOR POST COMPONENT///////////////////////////////

import React, { useState } from "react";
import "./Investor_post.css";

const posts = [
  {
    id: 1,
    name: "Name Surname",
    role: "Lorem ipsum dolor sit",
    time: "Today, 12.45",
    image: "https://source.unsplash.com/400x250/?coding,laptop",
    likes: 68,
    comments: 21,
  },
  {
    id: 2,
    name: "Name Surname",
    role: "Lorem ipsum dolor sit",
    time: "Today, 12.45",
    image: "https://source.unsplash.com/400x250/?crowd,people",
    likes: 45,
    comments: 15,
  },
];

const Investor_post = () => {
  const [postText, setPostText] = useState("");
  const [selectedSentiment, setSelectedSentiment] = useState(null);

  return (
    <div className="feed-container">
  
    


      {/* Posts Section */}
      <div className="posts">
        {posts.map((post) => (
          <div key={post.id} className="post-card">
            <div className="post-header">
              <div className="post-profile">
                <div className="profile-placeholder"></div>
                <div>
                  <h4>{post.name}</h4>
                  <p>{post.role}</p>
                  <p className="time">
                    <i className="ri-time-line"></i> {post.time}
                  </p>
                </div>
              </div>
            </div>

            <img src={post.image} alt="Post" className="post-image" />

            <div className="post-footer">
              <div className="actions">
                <button>
                  <i className="ri-thumb-up-line"></i> Like
                </button>
                <button>
                  <i className="ri-chat-3-line"></i> Comment
                </button>
              </div>
              <p className="stats">
                {post.likes} Likes â€¢ {post.comments} Comments
              </p>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default Investor_post;
////////////////////////////////////////////////////