// import React, { useState } from 'react';
// import { useForm } from "react-hook-form";
// import { Link, useNavigate } from "react-router-dom";
// import url from '../../env.js';
// import { toast, ToastContainer } from 'react-toastify';  // Import toastify
// import 'react-toastify/dist/ReactToastify.css'; // Import styles
// import './Register.css';
// import Header from '../Header/Header.js';

// const Register = () => {
//     const { register, handleSubmit, formState: { errors } } = useForm();
//     const navigate = useNavigate();

//     const onSubmit = async (data) => {
//         try {
//             const response = await fetch(`${url.apipath}user/registeruser`, {
//                 method: 'POST',
//                 headers: { 'Content-Type': 'application/json' },
//                 body: JSON.stringify(data),
//             });

//             if (response.ok) {
//                 toast.success('Registration successful!');  // Success toast
//                 setTimeout(() => navigate('/'), 3000); // Redirect to login page
//             } else if (response.status === 409) {
//                 const error = await response.json();
//                 toast.error(error.message || 'User already exists.');  // Error toast
//             } else {
//                 const error = await response.json();
//                 toast.error(error.message || 'Something went wrong. Please try again.');  // Error toast
//             }
//         } catch (err) {
//             toast.error('An error occurred. Please try again.');  // Error toast
//         }
//     };

//     return (
//         <>
//        <Header></Header>
//             <div className="center-wrapper">
//                 <div className="form-container">
//                     <h2>SignUp</h2>
//                     <form onSubmit={handleSubmit(onSubmit)}>
//                         <div className="input-group">
//                             <input
//                                 type="text"
//                                 placeholder="Name"
//                                 {...register('username', { required: 'Name is required' })}
//                             />
//                             {errors.username && <p className="error">{errors.username.message}</p>}
//                         </div>

//                         <div className="input-group">
//                             <input
//                                 type="email"
//                                 placeholder="EmailId"
//                                 {...register('useremail', {
//                                     required: 'Email is required',
//                                     pattern: { value: /^\S+@\S+$/i, message: 'Invalid Email' },
//                                 })}
//                             />
//                             {errors.useremail && <p className="error">{errors.useremail.message}</p>}
//                         </div>

//                         <div className="input-group">
//                             <input
//                                 type="password"
//                                 placeholder="Password"
//                                 {...register('userpass', {
//                                     required: 'Password is required',
//                                     minLength: { value: 6, message: 'Password must be at least 6 characters' },
//                                 })}
//                                 autoComplete="new-password" 
//                             />
//                             {errors.userpass && <p className="error">{errors.userpass.message}</p>}
//                         </div>

//                         <button type="submit" className="submit-button">Sign Up</button>
//                         <span className="acc">
//                             Already have an account? <Link to="/">Log In</Link>
//                         </span>
//                     </form>
//                 </div>
//             </div>
//             {/* Toast container */}
//             <ToastContainer />
//         </>
//     );
// };

// export default Register;


.center-wrapper {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
}
.logo {
  text-align: center;
}

.form-container {
  margin-bottom: -38px;
  background-color: white;
  /* height: 100vh; */
  padding: 2rem;
  border-radius: 10px;
  box-shadow: 0 8px 16px rgba(66, 68, 90, 1);
  max-width: 500px;
  width: 100%;
}

h2 {
  text-align: center;
  margin-bottom: 1.5rem;
  color: black;
  font-weight: 700;
}

.input-group {
  margin-bottom: 1rem;
}

label {
  display: block;
  margin-bottom: 0.5rem;
  font-size: 18px;
  color: black;
}

input {
  width: 100%;
  padding: 0.75rem;
  border: 1px solid #ccc;
  border-radius: 5px;
  transition: border-color 0.3s ease;
}

input:focus {
  border-color: #03BC38;
  outline: none;
}

.error {
  color: red;
  font-size: 0.875rem;
}

.submit-button {
  background-color: #03BC38;
  color: white;
  font-size: 20px;
  padding: 0.75rem;
  width: 100%;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.submit-button:hover {
  background-color: #028f2d;
}

.submit-button,
.acc {
  margin-bottom: 15px;
}

.acc {
  text-align: center;
}

.acc a {
  color: #03BC38;
  text-decoration: none;
}

.accs a {
  color: #03BC38;
  text-decoration: none;
  margin-left:5rem;
}

.acc a:hover {
  text-decoration: underline;
}

/* Responsive Styles */
@media (max-width: 768px) {
  .form-container {
    padding: 1.5rem;
    margin-bottom: 10rem;
  }

  h2 {
    font-size: 22px;
  }

  input {
    font-size: 16px;
    padding: 0.65rem;
  }

  .submit-button {
    font-size: 18px;
    padding: 0.65rem;
  }
}

@media (max-width: 480px) {
  body {
    padding: 1rem;
  }

  .form-container {
    padding: 1rem;
    margin-bottom: 10rem;
  }

  h2 {
    font-size: 20px;
    margin-bottom: 1rem;
  }

  input {
    font-size: 14px;
    padding: 0.6rem;
  }

  .submit-button {
    font-size: 16px;
    padding: 0.6rem;
  }

  .acc {
    font-size: 14px;
  }

  .acc a {
    font-size: 14px;
  }
}

==================================================================
login

import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { Link, useNavigate } from 'react-router-dom';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import '../RegistrationForm.css'; 

const LogIn = () => {
  const { register, handleSubmit, formState: { errors } } = useForm();
  const [msg, setMsg] = useState("");
  const navigate = useNavigate();

  // Display toast notifications
  const notifySuccess = (username) => toast.success(`Welcome, ${username}!`, { autoClose: 2000 });
  const notifyError = (message) => toast.error(message || 'Login failed. Please try again.', { autoClose: 3000 });

  const onSubmit = async (data) => {
    try {
      const response = await fetch('http://localhost:8090/user/loginuser', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include', 
        body: JSON.stringify({
          useremail: data.email,
          userpass: data.password
        })
      });

      const res = await response.json();

      if (res.success) {
        notifySuccess(res.message || "Login successful!");
        setTimeout(() => navigate('/home'), 2000); // Redirect after 2 seconds
      } else {
        setMsg(res.msg || "Invalid credentials.");
        notifyError(res.msg || "Invalid credentials.");
      }
    } catch (err) {
      console.error('Login error:', err);
      setMsg('An error occurred. Please try again.');
      notifyError('An error occurred. Please check your network.');
    }
  };

  return (
    <div className="center-wrapper">
      <div className="form-container">
        <h2>LogIn</h2>
        <form onSubmit={handleSubmit(onSubmit)}>
          <div className="input-group">
            <input 
              type="email" 
              placeholder="Email Id"
              {...register('email', { 
                required: 'Email is required', 
                pattern: { value: /^\S+@\S+$/i, message: 'Invalid email address' }
              })} 
            />
            {errors.email && <p className="error">{errors.email.message}</p>}
          </div>

          <div className="input-group">
            <input 
              type="password"
              placeholder="Password"
              {...register('password', { required: 'Password is required' })} 
            />
            {errors.password && <p className="error">{errors.password.message}</p>}
          </div>

          <button type="submit" className="submit-button">Log In</button>
          <div className="links-container">
            <span className="acc">
              Don't have an account? <Link to="/signin">Register</Link>
            </span>
            <span className="accs">
              <Link to="/forgetpassword">Forget Password?</Link>
            </span>
          </div>
        </form>
        {msg && <p className="message">{msg}</p>}
        <ToastContainer />
      </div>
    </div>
  );
};

export default LogIn;



======================================

import React from 'react'

import { useForm } from "react-hook-form";
// import { Link } from "react-router-dom";
import { toast, ToastContainer } from 'react-toastify'; // Import Toastify
import 'react-toastify/dist/ReactToastify.css'; // Import Toastify CSS
import url from '../../env.js';
const NewPassword = () => {
     const {
          register,
          handleSubmit,
          formState: { errors },
      } = useForm();
  return (
       <>
                {/* Toastify Container for notifications */}
                <ToastContainer />
                <div className="center-wrapper">
                    <div className="form-container">
                        <h2>Reset Password</h2>
                        <form onSubmit={handleSubmit(onSubmit)}>
                            <div className="input-group">
                                <input
                                    type="email"
                                    placeholder="New Password"
                                    {...register('newpassword', {
                                        required: 'New Password is required',
                                        pattern: { value: /^\S+@\S+$/i, message: 'Invalid password' }
                                    })}
                                    autoComplete="current-password"
                                />
                                {errors.useremail && <p className="error">{errors.useremail.message}</p>}
                            </div>
    
                            <div className="input-group">
                                <input
                                    type="password"
                                    placeholder="Password"
                                    {...register('password', {
                                        required: 'Password is required',
                                        minLength: { value: 6, message: 'Password must be at least 6 characters' }
                                    })}
                                />
                                {errors.password && <p className="error">{errors.password.message}</p>}
                            </div>
    
                            <button type="submit" className="submit-button">Log In</button>
                            <div className="links-container">
                                <span className="acc">
                                    Don't have an account? <Link to="/register">Register</Link>
                                </span>
                                <span className="accs">
                                    <Link to="/forgetpassword">Forget Password?</Link>
                                </span>
                            </div>
                        </form>
                    </div>
                </div>
            </>
  )
}

export default NewPassword